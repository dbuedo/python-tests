
# Mars Rover Kata to improve TDD flow and python skills #

Base Source from https://github.com/deltaforge/coding-dojo-week-1
Instructions from https://blog.deltaforce.io/wordpress/running-a-coding-dojo-to-improve-python-tdd-skills/

The Mars Rover kata
--------------------------------------
Here are the Mars Rover Kata instructions taken from: http://amirrajan.net/Blog/code-katas-mars-rover/

    - Develop an api that moves a rover around a grid.
    - You are given the initial starting point (x,y) of a rover and the direction (N,S,E,W) it is facing.
    - The rover receives a character array of commands.
    - Implement commands that move the rover forward/backward (f,b).
    - Implement commands that turn the rover left/right (l,r).
    - The only commands you can give the rover are f,b,l, and r.
    - Implement wrapping from one edge of the grid to another. (planets are spheres after all).
    - Implement obstacle detection before each move to a new square. If a given sequence of commands encounters an obstacle, the rover moves up to the last possible point and reports the obstacle.

And here is the example, which we expected the team to interpret as an acceptance test:

    - Let’s say that the rover is located at 0,0 facing North on a 100×100 grid.
    - Given the command “ffrff” would put the rover at 2,2 facing East.

Apart from the instructions in the kata, we also gave a short introduction in which we emphasized the following:

    1. Stick strictly to the (A)TDD workflow: https://cdn.tutsplus.com/net/uploads/legacy/2106_bdd/bdd_cycle.jpg
    2. If you feel lost, either ask or trust the (above) process to drive the logic out.
    3. Do not use the debugger or print statements to figure out what is going on, trust your tests to tell you what the code is doing.
